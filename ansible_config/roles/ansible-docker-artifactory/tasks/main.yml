---
# tasks file for docker-artifactory

# https://github.com/JFrogDev/artifactory-docker-examples/tree/master/docker-compose

- name: create group
  become: yes
  group:
    name: artifactory
    gid: 1030
    state: present

- name: create user
  become: yes
  user:
    name: artifactory
    groups: artifactory,wheel
    uid: 1030
    shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_bits: 4096
    password: "{{ vaulted_docker_artifactory_artifactory_user_password | password_hash('sha512') }}"

- name: create the artifactory folders
  become: yes
  file:
    path: "{{ docker_artifactory_data }}/{{ item }}"
    state: directory
    mode: 0755
    owner: artifactory
    group: artifactory
    recurse: yes
  with_items:
    - artifactory
    - artifactory/etc/plugins
    - artifactory/etc/security/keys/trusted
    - artifactory/access
    - artifactory/backup
    - artifactory/data
    - artifactory/logs
  notify: "restart nginx"

- name: copy certificates to trust
  become: yes
  copy:
    src: "{{ item.path }}"
    dest: "{{ docker_artifactory_data }}/artifactory/etc/security/keys/trusted"
    remote_src: "{{ item.remote_src }}"
    mode: 0744
    owner: artifactory
    group: artifactory
  loop: "{{ docker_artifactory_certs_to_trust }}"
  when: docker_artifactory_certs_to_trust is defined

- name: copy the artifactory license
  become: yes
  copy:
    src: artifactory.lic
    dest: "{{ docker_artifactory_data }}/artifactory/etc/"
    mode: 0400
    owner: artifactory
    group: artifactory

- name: copy the artifactory plugins
  become: yes
  copy:
    src: "{{ item }}"
    dest: "{{ docker_artifactory_data }}/artifactory/etc/plugins/"
    mode: 0755
    owner: artifactory
    group: artifactory
  with_fileglob:
    - "files/plugins/*"

- name: create the nginx folders
  become: yes
  file:
    path: "{{ docker_artifactory_data }}/{{ item }}"
    state: directory
    mode: 0700
    owner: root
    group: root
    recurse: yes
  with_items:
    - nginx/conf.d
    - nginx/logs
    - nginx/ssl/artifactory
  notify: "restart nginx"

- name: copy the nginx conf
  # The conf file was generated by using the reverse proxy generator inside Artifactory (Admin tab, Configuration | Reverse Proxy).
  become: yes
  template:
    src: artifactory.conf.j2
    dest: "{{ docker_artifactory_data }}/nginx/conf.d/artifactory.conf"
    owner: root
    group: root
    mode: 0400
  notify: "restart nginx"

- name: copy the key
  become: yes
  copy:
    src: "files/{{ docker_artifactory_dns }}.key"
    dest: "{{ docker_artifactory_data }}/nginx/ssl/artifactory/{{ docker_artifactory_dns }}.key"

- name: own the key
  become: yes
  file:
    path: "{{ docker_artifactory_data }}/nginx/ssl/artifactory/{{ docker_artifactory_dns }}.key"
    state: file
    group: root
    owner: root
    mode: 0400

- name: copy the pem
  become: yes
  copy:
    src: "files/{{ docker_artifactory_dns }}.pem"
    dest: "{{ docker_artifactory_data }}/nginx/ssl/artifactory/{{ docker_artifactory_dns }}.pem"

- name: own the pem
  become: yes
  file:
    path: "{{ docker_artifactory_data }}/nginx/ssl/artifactory/{{ docker_artifactory_dns }}.pem"
    state: file
    group: root
    owner: root
    mode: 0400

- name: create the postgres folders
  become: yes
  file:
    path: "{{ docker_artifactory_data }}/postgresql"
    state: directory
    mode: 0700
  notify: "restart nginx"

- name: pull the postgres docker image
  become: yes
  docker_image:
    name: postgres:{{ docker_artifactory_postgresql_tag }}
    source: pull
  register: docker_artifactory_postgresql_pull_result

- name: pull the artifactory-pro docker image
  become: yes
  docker_image:
    name: docker.bintray.io/jfrog/artifactory-pro:{{ docker_artifactory_artifactory_pro_tag }}
    source: pull
  register: docker_artifactory_artifactory_pull_result

- name: pull the nginx docker image
  become: yes
  docker_image:
    name: nginx:{{ docker_artifactory_nginx_tag }}
    source: pull
  register: docker_artifactory_nginx_pull_result

- name: create the docker_compose folder
  become: yes
  file:
    path: "{{ docker_artifactory_docker_compose_folder }}"
    state: directory
    mode: 0740
    recurse: yes

- name: export postgres data
  include_tasks: postgresql_export.yml
  # Whether the user entered "yes" as a string or yes as a bool, this will ensure it gets evaluated correctly.
  when: docker_artifactory_postgresql_migrate | bool

- name: copy the docker-compose.yml file
  become: yes
  template:
    src: "templates/docker-compose.yml"
    dest: "{{ docker_artifactory_docker_compose_folder }}/docker-compose.yml"
    mode: 0700
    owner: root
    group: root

# Normally, when using docker-compose, I would let the compose spin up the containers all at once. It's easier that way.
# Unfortunately, starting from Artifactory 7.8.x, PostgreSQL needs to be started before starting the other services.
# So let's start it first by default from now on, not caring what version of Artifactory we're using.
- name: bring up the docker instance for postgresql
  become: yes
  docker_compose:
    project_name: artifactory
    project_src: "{{ docker_artifactory_docker_compose_folder }}"
    services:
      - postgresql
  register: docker_artifactory_compose_postgresql_result

- name: wait 15 seconds to ensure the postgresql container is up
  pause:
    seconds: 15

- name: import postgres data
  include_tasks: postgresql_import.yml
  # Whether the user entered "yes" as a string or yes as a bool, this will ensure it gets evaluated correctly.
  when: docker_artifactory_postgresql_migrate | bool

- name: bring up the docker instances for artifactory and nginx
  become: yes
  docker_compose:
    project_name: artifactory
    project_src: "{{ docker_artifactory_docker_compose_folder }}"
    services:
      - artifactory
      - nginx
  register: docker_artifactory_compose_artifactory_nginx_result
